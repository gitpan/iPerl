#! /usr/local/bin/perl
#
# Copyright © 1999, 2000, Daniel Pfeiffer <occitan@esperanto.org>
#
# iPerl may be copied only under the terms of either the Artistic License or
# the GNU General Public License, which may be found in the Perl 5.0 source kit.
#
# Info and latest version are at http://beam.to/iPerl/

use CGI qw':standard';
use CGI::Carp qw'fatalsToBrowser';

use Text::iPerl $VERSION = 0.53;
*header = \$Text::iPerl::header;

my $type =
    Text::iPerl::case $ENV{PATH_TRANSLATED},
	'ht(?:ml)?p?$' => [],
	'xml?p?$' => [-type => 'text/xml'],
	'css?p?$' => [-type => 'text/css'],
	'wml?p?$' => [-type => 'text/vnd.wap.wml'],
	'sgm?l?p?$' => [-type => 'text/sgml'],
	'utx?t?p?$' => [-type => 'text/plain; charset=UTF-8'],
	'psp?$' => [-type => 'application/postscript'],
	'xbm?p?$' => [-type => 'image/x-xbitmap'],
	'xpm?p?$' => [-type => 'image/x-xpixmap'],
	'' => [-type => 'text/plain'];
$header = header( @type = @$type );

my( $directory, $file ) = split m!/(?=[^/]*$)!, $ENV{PATH_TRANSLATED};

chdir $directory;
include $file;

__END__

=head1 NAME

web-iPerl - bring Web-documents alive
with bits of embedded Perl


=head1 DESCRIPTION

This is the webserver frontend of an inverse Perl interpreter, where HTML,
XML, SGML, PostScript or plain text gets passed to the browser as is, while
specially marked Perl statements are executed on the server-side.  Loop or
conditional blocks can surround normal text.  The MIME-type is recognized
by the file suffix according to the following table:

=over

=item text/html

C<html>, C<phtml>, C<htmlp> and C<pht>, C<htp>

=item text/css

C<css>, C<pcss>, C<cssp> and C<pcs>, C<csp>

=item text/plain

All not found elsewhere, including C<txt>, C<ptxt>, C<txtp> and C<ptx>, C<txp>

=item text/plain; charset=UTF-8

C<utxt>, C<putxt>, C<utxtp> and C<put>, C<utp>

=item text/sgml

C<sgml>, C<psgml>, C<sgmlp> and C<psg>, C<sgp>

=item text/vnd.wap.wml

C<wml>, C<pwml>, C<wmlp> and C<pwm>, C<wmp>

=item text/xml

C<xml>, C<pxml>, C<xmlp> and C<pxm>, C<xmp>

=item application/postscript

C<ps>, C<pps>, C<psp>, C<eps>, C<peps>, C<epsp> and C<pep>, C<epp>

=item image/x-xbitmap

C<xbm>, C<pxbm>, C<xbmp> and C<pxb>, C<xbp>

=item image/x-xpixmap

C<xpm>, C<pxpm>, C<xpmp> and C<pxp>, C<xpp> (not understood by most browsers)

=back

The first plain text flushed out by C<web-iPerl> is preceded by the value
C<$header>, which has been set for you.  This means that if your document
starts with a bit of Perl, the variable contains the HTTP-header and may be
modified.  Or you can unset it and write the header right after the Perl
section - B<no newline> in between though!  Inversely you should not C<print>
any output before the header has been printed.  Processing occurs in the
directory where the file was found.

If you call any system-commands (beware of passing uncontrolled arguments from
the query!) you should first turn on autoflushing (C<$| = 1>) to ensure that
output order is preserved.


=head1 VARIABLES

=over

=item $header

Normally the empty string.  Is output and reset every time iPerl wants to
output a bit of plain text.


=item @type

Holds the list of arguments to CGI function header.  This can help you change
the header more easily, by adding you own options.

  $header = header @type, ...;

=back


=head1 INSTALLATION

The file-suffixes are freely electable as listed above.  For Apache these are
attributed to an internal MIME-type, which is then correlated to the
C<web-iPerl> interpreter by the action module, which must be installed in
Apache.  On the first line put all the suffixes you expect to use among those
found above, under L<DESCRIPTION>.

  AddType application/x-web-iPerl pcss phtml pps ptxt putxt pps
  Action application/x-web-iPerl /cgi-bin/web-iPerl

  DirectoryIndex index.html index.htm index.phtml index.pht

Warning: Due to the way the CGI mechanism works, this method can cause failure
when running under full load.  If the server already has as many processes
running as one user is allowed by the system to spawn, starting this script
will fail, making some page temporarily inservable.  This means the MAXUP
parameter should be somewhat higher than the maximum number of connections
served.


=head1 SEE ALSO

L<Text::iPerl>, L<iperl>, L<iPerl.el>, L<perl>, http://beam.to/iPerl/
